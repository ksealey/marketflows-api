<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use \App\Models\PhoneNumber;
use \App\Models\PhoneNumberPool;
use \App\Models\Campaign;
use \App\Models\CampaignPhoneNumber;
use \App\Models\CampaignPhoneNumberPool;


class OpenTest extends TestCase
{
    use \Tests\CreatesUser;

    /**
     * Test assigning a phone number
     * 
     * @group open-campaigns
     */
    public function testCanAssignPhone()
    {
        $user        = $this->createUser();
        $campaign    = factory(Campaign::class)->create([
            'company_id'   => $user->company_id,
            'created_by'   => $user->id
        ]);

        $phoneNumber1 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -3 minutes'))
        ]);
        $phoneNumber2 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -2 minutes'))
        ]);
        $phoneNumber3 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -1 minute'))
        ]);
    
        CampaignPhoneNumber::create([
            'campaign_id'     => $campaign->id,
            'phone_number_id' => $phoneNumber1->id
        ]);
        CampaignPhoneNumber::create([
            'campaign_id'     => $campaign->id,
            'phone_number_id' => $phoneNumber2->id
        ]);
        CampaignPhoneNumber::create([
            'campaign_id'     => $campaign->id,
            'phone_number_id' => $phoneNumber3->id
        ]);
    
        $phoneIds = [];
        for($i = 0; $i < 5; $i++){
            $phoneIds[] = $phoneNumber1->id;
            $phoneIds[] = $phoneNumber2->id;
            $phoneIds[] = $phoneNumber3->id;
        }

        //  Make sure it's rotates properly
        foreach( $phoneIds as $phoneId ){
            $response = $this->json('POST', '/v1/open/campaigns/' . $campaign->id . '/assign-phone');
            $response->assertStatus(200);
            $response->assertJSON([
                'phone_number' => [
                    'id' => $phoneId
                ]
            ]);
        }
    }

    /**
     * Test assigning a phone number via phone pool
     * 
     * @group open-campaigns
     */
    public function testCanAssignPhoneViaPhonePool()
    {
        $user        = $this->createUser();
        $campaign    = factory(Campaign::class)->create([
            'company_id'   => $user->company_id,
            'created_by'   => $user->id
        ]);
        $pool = factory(PhoneNumberPool::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id
        ]);

        $phoneNumber1 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'phone_number_pool_id' => $pool->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -3 minutes'))
        ]);
        $phoneNumber2 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'phone_number_pool_id' => $pool->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -2 minutes'))
        ]);
        $phoneNumber3 = factory(PhoneNumber::class)->create([
            'company_id' => $user->company_id,
            'created_by' => $user->id,
            'phone_number_pool_id' => $pool->id,
            'last_assigned_at' => date('Y-m-d H:i:s', strtotime('now -1 minute'))
        ]);
    
        CampaignPhoneNumberPool::create([
            'campaign_id'           => $campaign->id,
            'phone_number_pool_id'  => $pool->id
        ]);
    
        $phoneIds = [];
        for($i = 0; $i < 5; $i++){
            $phoneIds[] = $phoneNumber1->id;
            $phoneIds[] = $phoneNumber2->id;
            $phoneIds[] = $phoneNumber3->id;
        }

        //  Make sure it's rotates properly
        foreach( $phoneIds as $phoneId ){
            $response = $this->json('POST', '/v1/open/campaigns/' . $campaign->id . '/assign-phone');
            $response->assertStatus(200);
            $response->assertJSON([
                'phone_number' => [
                    'id' => $phoneId
                ]
            ]);
        }
    }

}
